// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Event struct {
	ID             string     `json:"id"`
	SubscriberName string     `json:"subscriberName"`
	SubscribedTo   string     `json:"subscribedTo"`
	Type           *EventType `json:"type"`
}

type EventByStreamer struct {
	Streamer string `json:"streamer"`
	Count    int    `json:"count"`
}

type EventType string

const (
	EventTypeFollow       EventType = "FOLLOW"
	EventTypeSubscription EventType = "SUBSCRIPTION"
)

var AllEventType = []EventType{
	EventTypeFollow,
	EventTypeSubscription,
}

func (e EventType) IsValid() bool {
	switch e {
	case EventTypeFollow, EventTypeSubscription:
		return true
	}
	return false
}

func (e EventType) String() string {
	return string(e)
}

func (e *EventType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventType", str)
	}
	return nil
}

func (e EventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
